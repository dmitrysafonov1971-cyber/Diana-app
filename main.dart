import 'package:flutter/material.dart';

void main() {
  runApp(const DianaApp());
}

class DianaApp extends StatelessWidget {
  const DianaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '–î–∏–∞–Ω–∞',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(useMaterial3: true, colorSchemeSeed: Colors.teal),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatelessWidget {
  const SplashScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFFF7EE),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.pets, size: 64, color: Colors.orange),
              const SizedBox(height: 16),
              const Text(
                '–ü—Ä–∏–≤–µ—Ç, –†–∞–≤–≤–∏!\n–Ø —á—Ç–æ-—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—é?',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 26, fontWeight: FontWeight.w700),
              ),
              const SizedBox(height: 24),
              FilledButton(
                onPressed: () {
                  Navigator.of(context).pushReplacement(
                    MaterialPageRoute(builder: (_) => const HomeScreen()),
                  );
                },
                child: const Padding(
                  padding: EdgeInsets.symmetric(horizontal: 36.0, vertical: 14),
                  child: Text('–ù–∞—á–∞—Ç—å', style: TextStyle(fontSize: 18)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final List<_Reminder> _reminders = [];

  void _addManual() async {
    final result = await showDialog<_ManualResult>(
      context: context,
      builder: (_) => const _ManualDialog(),
    );
    if (result == null) return;
    setState(() => _reminders.add(_Reminder(text: result.text, time: result.time)));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: const Icon(Icons.pets),
        title: const Text('–î–∏–∞–Ω–∞ ‚Äî —Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
      ),
      body: _reminders.isEmpty
          ? const Center(
              child: Text(
                '–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏ üéô —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–º\n–∏–ª–∏ "+" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é.',
                textAlign: TextAlign.center,
              ),
            )
          : ListView.separated(
              padding: const EdgeInsets.symmetric(vertical: 12),
              itemCount: _reminders.length,
              separatorBuilder: (_, __) => const SizedBox(height: 6),
              itemBuilder: (context, i) {
                final r = _reminders[i];
                return Card(
                  margin: const EdgeInsets.symmetric(horizontal: 12),
                  child: ListTile(
                    leading: const Icon(Icons.alarm),
                    title: Text(r.text),
                    subtitle: Text(_fmt(r.time)),
                    trailing: IconButton(
                      icon: const Icon(Icons.delete_outline),
                      onPressed: () => setState(() => _reminders.removeAt(i)),
                    ),
                  ),
                );
              },
            ),
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          FloatingActionButton.extended(
            heroTag: 'manual',
            onPressed: _addManual,
            label: const Text('–î–æ–±–∞–≤–∏—Ç—å'),
            icon: const Icon(Icons.add),
          ),
          const SizedBox(height: 12),
          FloatingActionButton(
            heroTag: 'mic',
            onPressed: () {
              // –ó–∞–≥–æ—Ç–æ–≤–∫–∞: –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.')),
              );
            },
            child: const Icon(Icons.mic_none),
          ),
        ],
      ),
    );
  }

  String _fmt(DateTime t) {
    final hh = t.hour.toString().padLeft(2, '0');
    final mm = t.minute.toString().padLeft(2, '0');
    return '${t.day}.${t.month}.${t.year} $hh:$mm';
  }
}

class _Reminder {
  final String text;
  final DateTime time;
  _Reminder({required this.text, required this.time});
}

class _ManualDialog extends StatefulWidget {
  const _ManualDialog();

  @override
  State<_ManualDialog> createState() => _ManualDialogState();
}

class _ManualDialogState extends State<_ManualDialog> {
  final _textCtrl = TextEditingController();
  DateTime _when = DateTime.now().add(const Duration(minutes: 5));

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('–ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _textCtrl,
            decoration: const InputDecoration(
              labelText: '–¢–µ–∫—Å—Ç',
              hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–æ—Ä–º–∏—Ç—å –≠–±–∏',
            ),
          ),
          const SizedBox(height: 12),
          ListTile(
            contentPadding: EdgeInsets.zero,
            title: const Text('–ö–æ–≥–¥–∞'),
            subtitle: Text(_fmt(_when)),
            trailing: const Icon(Icons.schedule),
            onTap: () async {
              final d = await showDatePicker(
                context: context,
                firstDate: DateTime.now(),
                lastDate: DateTime.now().add(const Duration(days: 365 * 3)),
                initialDate: _when,
              );
              if (d == null) return;
              final t = await showTimePicker(
                context: context,
                initialTime: TimeOfDay.fromDateTime(_when),
              );
              if (t == null) return;
              setState(() {
                _when = DateTime(d.year, d.month, d.day, t.hour, t.minute);
              });
            },
          ),
        ],
      ),
      actions: [
        TextButton(onPressed: () => Navigator.pop(context), child: const Text('–û—Ç–º–µ–Ω–∞')),
        FilledButton(
          onPressed: () {
            if (_textCtrl.text.trim().isEmpty) return;
            Navigator.pop(context, _ManualResult(text: _textCtrl.text.trim(), time: _when));
          },
          child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
        ),
      ],
    );
  }

  String _fmt(DateTime t) {
    final hh = t.hour.toString().padLeft(2, '0');
    final mm = t.minute.toString().padLeft(2, '0');
    return '${t.day}.${t.month}.${t.year} $hh:$mm';
  }
}

class _ManualResult {
  final String text;
  final DateTime time;
  _ManualResult({required this.text, required this.time});
}